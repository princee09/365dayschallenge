2200. Find All K-Distant Indices in an Array




Imagine you are given a row of boxes, and each box has a number written inside.

You are told to find all the box positions where the number is close enough to a "special" number 
(called key) within a certain number of steps â€” left or right.

For example, if the key appears at position 5, and you are allowed to go 2 steps in 
either direction (k = 2), then box positions 3, 4, 5, 6, and 7 are all considered close to the key.

So, for every box that has the special number inside, we mark the nearby boxes within k distance.

Finally, we return all the marked positions in increasing order.

This is what the code does: it looks for where the key appears, then from each
such spot, it marks all boxes within k steps as valid. Then it gives you the list of all valid box positions.







932. Beautiful Array








A beautiful array is like a special arrangement of numbers where a strange rule is followed.

Suppose you have to arrange numbers from 1 to n in a row. But you must arrange them in such a 
way that no three numbers form a pattern where the middle number is the average of the other two. 
For example, [1, 3, 2] is not allowed, because 3 is the average of 1 and 5.

Now how do we build such an arrangement?

The trick is to build it recursively. We start small, say from [1], which is already beautiful.

Then we build bigger arrays using that small beautiful part. If we take all the numbers from a 
small beautiful array and double them, we get all the even numbers. If we double them and subtract one, we get all the odd numbers.

Odd numbers and even numbers do not interfere with each other in this pattern, so putting them together 
still gives a beautiful array.

So the code splits the problem into two halves: one for odd positions and one for even positions, solves each half separately, and then combines them to get the final result.

