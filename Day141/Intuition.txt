 222: Count Complete Tree Nodes
Imagine you are standing in front of a large triangular shelf made of boxes. Each row of the shelf is filled with boxes placed neatly side by side. This shelf is designed such that all rows, except possibly the last one, are completely filled, and even the last row is filled from the left with no empty spaces in between. Now, suppose you are asked to count all the boxes on the shelf. A straightforward way would be to go box by box and count each one manually. But if the shelf has thousands of boxes, that becomes time-consuming.

Instead, you realize that you can use the structure of the shelf to your advantage. You observe that if you start at the top box and go straight down the left edge, and then start again from the top and go down the right edge, and if both paths are of the same length, this means the shelf is perfectly filled like a pyramid. You can then use a math formula, like calculating the total number of blocks in a triangle, to instantly get the count. If the left and right heights are not the same, it means the shelf is not perfectly filled, and part of it is missing. So you split the shelf into smaller parts and apply the same logic again — calculate directly where the shape is perfect and only go deeper where it’s not.

This is similar to counting floors in a building where each floor has a predictable number of rooms unless you reach the top, which may be under construction. Instead of visiting each room, you count the full floors using multiplication and only step into the unfinished floor to check the remaining rooms. This approach saves time and effort and avoids blindly counting everything. By relying on the symmetrical structure of the shelf (or building), we can make the counting process much faster and smarter.

863: All Nodes Distance K in Binary Tree
Now, imagine you're in a neighborhood where each house is connected to two other houses — one on the left and one on the right — but no house knows who its parent is. You live in one of these houses (let’s call it the target house), and someone asks you to find all the houses that are exactly k streets away from yours. The catch is: since houses don’t know who their parent is, you can only move forward — you can go to your left and right neighbor, but not back to the house that connects to yours unless you first figure out who that is.

So, your first task is to walk around the entire neighborhood and ask every house: “Who do you belong to?” or in other words, “Who is your parent house?” You write down this information, building a neighborhood map that lets you go in all directions — left, right, or up to the parent. Now that you have this map, you can explore the neighborhood systematically. You start at your house, and in the first step, you go to all directly connected houses — your left neighbor, right neighbor, and your parent. In the second step, you move outward again from those houses, and you keep doing this until you have taken exactly k steps. At that point, you stop and note down the houses you've reached — these are the ones that are exactly k streets away from your original position.

Think of this like riding a subway system where each station connects to others, but the official map is missing. First, you gather all the connections yourself — figuring out which stations are connected, even if some are above or below you. Then you start from your station and travel outward, stop by stop, counting each level you move through. When you’ve taken exactly k stops, you pause and look around to see which stations you’re at. Those are your answers. This method makes sure you only explore as far as necessary and prevents you from looping back to the same station repeatedly.

By converting the tree into a fully connected map, and using a layered approach to explore it, you can find exactly the set of places that are the required distance away, without checking every path exhaustively.