350. Intersection of Two Arrays II



Suppose you have two bags full of numbered balls, and some numbers appear more than once in each bag. 
You want to take out all the balls that appear in both bags, but only as many times as they appear in both.

So if one bag has two balls labeled "2", and the other bag also has two balls labeled "2", then you can take both. 
But if one has only one "2", and the other has two "2s", you can only take one "2" because it’s common only once.

To do this, we count how many times each number appears in the first bag. Then, 
we look into the second bag and whenever we find a number that’s also in the 
first bag (and we haven’t taken too many of it), we take it and reduce its count from the first bag’s memory.

This way we only take the common numbers and only as many times as both bags allow.








532. K-diff Pairs in an Array




Imagine you are looking for pairs of numbers in a list where the difference between the two numbers is exactly k (like 2, 3, or even 0).

Now, if you were given a list of numbers like [3, 1, 4, 1, 5] and asked to find how many unique pairs have a 
difference of exactly 2, you could look for number pairs like (1, 3) and (3, 5). Even though "1" appears twice, 
we only count the pair (1, 3) once, because the question only wants unique pairs.

So, what the code does is this:

First, it remembers how many times each number appears in the list.

Then it checks each number:

If k is 0, it means we're looking for duplicates numbers that appear at least twice (like two 1s).

If k is greater than 0, we just check: “Is there another number in the list that is exactly k units higher than the current number?” If yes, we count it as a valid unique pair.

This smart way avoids checking the same pair multiple times and works even for big lists.