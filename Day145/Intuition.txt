
We first copy the original string into a new string called `ans`, which we’ll modify. Then we create 26 buckets (one for each lowercase letter from `'a'` to `'z'`), where each bucket will store the positions (indices) of characters as we find them in the string. We go through the string from left to right. If the character is not a star (`*`), we figure out its corresponding bucket (based on its alphabet position) and store its index there. But when we find a `*`, we do two things: first, we replace that `*` in `ans` with a space (marking it for removal), and second, we look through the buckets from `'a'` to `'z'` to find the smallest letter that has appeared so far (i.e., the bucket that's not empty and corresponds to the smallest letter), then we remove the most recent index of that letter from the bucket and also replace that character in `ans` with a space.

In the end, we erase all the spaces from `ans`, effectively deleting all the `*` and the smallest characters before them. The result is the final string that’s as small as possible in dictionary order.
