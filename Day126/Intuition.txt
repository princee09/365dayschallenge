**45. Jump Game II**

  Imagine you’re standing on a series of stepping stones numbered from 0 to n–1. Each stone tells you the furthest you can hop forward from there. You want to reach the last stone using as few hops as possible. The trick is: as you hop, keep an eye on how far you *could* go if you hopped somewhere within your current range, and only actually make your “real” hop when you’ve reached the edge of that range. That way, each hop you *do* take always jumps you as far as possible.

* **In-Depth Intuition:**

  1. **Key Variables:**

     * `currentEnd`: the furthest index you can reach with the hops you’ve *already* decided to make.
     * `farthest`: the furthest index you *could* reach by possibly hopping from any stone in your current segment (before you make the next hop).
     * `jumps`: how many actual hops you’ve taken so far.

  2. **Walking Through the Stones:**

     * Start at stone 0. Initially, you haven’t made any hops, so `currentEnd = 0`, `farthest = 0`, `jumps = 0`.
     * For each stone `i` from 0 up to the second-to-last stone (because once you reach the last stone you’re done):

       * Update `farthest = max(farthest, i + nums[i])`. This represents “if I were still on my previous hop segment, how far could I get by jumping from stone i?”
       * If you reach `i == currentEnd`, it means you’ve explored all stones you could get to with your *current* set of hops. Now you *must* take another real hop to continue. So you do:

         * `jumps++` (you commit to one more hop),
         * `currentEnd = farthest` (your new hop can take you up to the farthest place you saw).

  3. **Why It’s Correct and Optimal:**

     * You never “waste” jumps: you only increase `jumps` when you’ve exhausted your current reach.
     * At each decision point, you’re maximizing how far your next hop can go (greedy).
     * Since you always postpone a hop until you have to, you’re minimizing the total hops.

---

**57. Insert Interval**

  Think of a sorted list of non-overlapping time slots on your calendar. You want to add a new appointment. You slide through your existing slots:

  1. Keep all slots that end before your new one starts (they don’t conflict).
  2. Merge any that overlap with your new one by stretching your new slot to cover them.
  3. At the end, append any remaining slots that start after your merged appointment.

* **In-Depth Intuition:**

  1. **Why Three Phases?**

     * The existing intervals are sorted and don’t overlap.
     * When inserting a new interval, it can only interact (overlap) with a contiguous block of the existing ones. Everything before that block is wholly before, and everything after is wholly after.

  2. **Phase 1: Add Non-Overlapping Left Intervals**

     * While the next existing interval ends *before* your new interval starts, simply copy it over. They’re disjoint and won’t affect the new one.

  3. **Phase 2: Merge Overlapping Intervals**

     * Now you’re at the first interval that might overlap (`existing.start <= new.end`).
     * As long as there is overlap (`existing.start <= new.end`), merge by:

       * `new.start = min(new.start, existing.start)`
       * `new.end   = max(new.end, existing.end)`
     * This “expands” your new interval to swallow all conflicts.

  4. **Phase 3: Add Non-Overlapping Right Intervals**

     * Once you pass the merge zone (the next interval starts after the merged new interval ends), just copy the rest of the intervals as they were.

  5. **Why It’s O(n):**

     * You make exactly one pass over the list, touching each interval at most once.
     * Merging costs O(1) work per overlapped interval.

This structured approach ensures you correctly place and merge the new interval in linear time, preserving sorted order and non-overlap.
