In preorder traversal of a binary tree, we visit nodes in this order: first the current node (called the root), then the left child, and finally the right child. Normally, this is done using recursion, which automatically keeps track of what to visit next. But in this case, we want to do it without recursion, so we use a stack to manually keep track of the nodes we need to visit. We start by putting the root node in the stack. Then we repeatedly take a node from the top of the stack, add its value to our answer, and if it has children, we push the right child first and then the left child. We push the right child first because the stack works in a last-in, first-out manner. This way, the left child will be on top and will be processed next, which keeps the correct order of root, left, then right. We keep doing this until the stack is empty. This method helps us visit all the nodes in preorder without using recursion.